# Using git:

# Book:
https://git-scm.com/book/en/v2

# keeping email addr private:
https://help.github.com/articles/keeping-your-email-address-private/
# Configure web interface settings>email>setstuff
# SET user.email to username@users.noreply.github.com

# TODO: organize this where it should go
# view changes
git reflog
# Can revert to a state listed by
git reset --hard <sha_from_reflog> # --hard to change local files

# Uploading:
git status # Get status
git add *
git commit -m 'changelogtext' # sometimes need -a too
git push

# Downloading:
# 1st time:
git clone http://www.github.com/*.git
#or
git clone git@github.com:userName/RepoName.git
#or
git clone gh-account2:account2/somerepo.git

# Subsequent:
git pull



### Initializing a new repo from cmd:
# Creating new
Make empty repo on web interface first.
cd /dir/to/folder/repoName
echo '# repoName' >> README.md
git init
git config # any username/email change do it now.
git add README.md
git commit -m 'first commit'
git remote add origin https://github.com/sayboltm/repoName.git
-or-
git remote add origin gh-accountID:username/repoName.git
git push -u origin master

# push existing repo from cmdline
git remote add origin https://github.com/username/repoName.git
	# OR
	git remote add origin gh-accountID:username/repoName.git
git push -u origin master The added vigilance of this project's hardware and software will supplement your dog/firearm as well as your own eyes and ears for securing your home from a BG, or snooping maintenance personnel. ;)




# Temporarily stash changes
git stash/pop or something

# Discard changes and overwrite with remote branch
git checkout .
# if this doesn't work try:
git reset --hard origin/master

# Revert commit
git reset --hard HEAD^
# or for moar
git reset --hard HEAD~2 # last two commits

# Changing username:
git config --global user.name 'your username'
# -OR-
git config --global user.email email@website.com

# Reset author:
git commit --amend --reset-author



### Working with multiple accounts on one machine
#http://stackoverflow.com/questions/3860112/multiple-github-accounts-on-the-same-computer
	#https://code.tutsplus.com/tutorials/quick-tip-how-to-work-with-github-and-multiple-accounts--net-22574
	# Gen keys: https://help.github.com/articles/connecting-to-github-with-ssh/
	# Reconfig user per-repo basis: https://help.github.com/articles/setting-your-email-in-git/
# SSH passphrase stuff
# https://help.github.com/articles/working-with-ssh-key-passphrases/

# NIX
# To just add passwordless access http://stackoverflow.com/questions/8588768/git-push-username-password-how-to-avoid
# Check for existing keys in the ~/.ssh/ dir https://help.github.com/articles/checking-for-existing-ssh-keys/
# If none:
# Gen key
# Else, see link
ssh-keygen -t rsa -b 4096 -C 'youremail@email.com'
# Save to .ssh with full path (not ~/.ssh)

# Add to ssh agent
# Make sure started, start in background:
eval '$(ssh-agent -s)'

# Add key
ssh-add ~/.ssh/id_rsa_newkey

# Add public key *.pub to github account in web interface

# now need to tell github to use SSH with stored key instead of httpget, i.e.:
# git+ssh://git@github.com/username/reponame.git
# instead of:
# https://github.com/username/reponame.git
# IF is already:
gh-desiredidentity:username/reponame.git
# then good to go

# To see repo URL:
git remote show origin

# To modify:
git remote set-url origin git+ssh://git@github.com/yourusername/yourrepo.git

# Windows:
#http://kevinpelgrims.com/blog/2012/07/20/setting-up-multiple-github-accounts-on-windows/
# Gen new ssh key:
ssh-keygen -t rsa -C 'yourEmail@email.com's

# Gen pub/priv rsa key pair:
# Generating public/private rsa key pair.
# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  ( be careful, rename to something besides default)
/c/Users/you/.ssh/id_rsa_two

# Enter passphrase to protect the key

# Configure SSH key: 
	# Go to .ssh folder, copy .pub (public key) contents to GitHub in Account Settings > SSH Keys
	# Add private key to local ssh database (annoying on Windows, ssh-add doesn't work out of box)
		# Git bash:
		exec ssh-agent bash # Make sure ssh agent running (has been skipped if don't have official git shell installed)
		ssh-add /c/Users/you/.ssh/id_rsa_two # now can use ssh-add

	# Setup two profiles in config file .ssh/config
		#Account account1
		Host gh-account1
    			HostName github.com
    			User git
    			PreferredAuthentications publickey
    			IdentityFile /c/Users/you/.ssh/id_rsa_1	
		#Account account2
			Host gh-account2
    			HostName github.com
  			User git
    			PreferredAuthentications publickey
    			IdentityFile /c/Users/you/.ssh/id_rsa_2
# Test it!
ssh -T git@github.com # auth default account
ssh -T git@github.com -i /c/Users/you/.ssh/id_rsa_two
# Will return
Hi username! You successfull auth...

# When cloning using second account, use
git clone gh-account2:account2/somerepo.git
#instead of just
git clone https://github.com/account2/somerepo.git
# else will clone with account1 (default) and then push will get pissed off

# See who cloned/committed local
git reflog --format=full

# Change username for that local repo with
git config user.name 'username'
git config user.email 'email@email.com'
